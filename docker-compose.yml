services:
  db:
    image: postgres:15-alpine
    networks: [app-net]
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  app:
    build:
      context: .
    networks: [app-net]
    env_file: .env
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_LIQUIBASE_ENABLED: "true"
      SPRING_LIQUIBASE_CHANGE_LOG: "classpath:/db/changelog/db.changelog-master.yaml"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  # для CI в гитхабе: docker compose --profile test up --build --abort-on-container-exit --exit-code-from tests
  tests:
    profiles: ["test"]
    build:
      context: .
      target: test
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    command: >
      sh -c "
        until nc -z db 5432; do echo 'waiting for db...'; sleep 0.5; done;
        ./mvnw test
      "
    volumes:
      - ./build/test-reports:/app/target/surefire-reports
      - ./build/it-reports:/app/target/failsafe-reports
    networks: [app-net]
    restart: "no"

networks:
  app-net:

volumes:
  pgdata: